#!/usr/bin/ruby

#
# bbb-user-data.rb
#

require 'trollop'
require 'nokogiri'
require 'csv'

opts = Trollop.options do
  opt :userId, 'userId', type: :string
  opt :recordingID, 'recordingID', type: :string
end

def get_user_info(userid, dirid)
  CSV.open('info.csv', 'wb') do |csv|
    # Search in all directories for a file of name events.xml
    csv << ["Info in database for user with ID(#{userid})"]
    csv << ['event', 'timestamp', 'module', 'Msg (if applicable)']
    Dir.glob("#{dirid}/events.xml") do |file|
      doc = Nokogiri::XML(File.open(File.expand_path(file)))
      events = doc.xpath('//event')
      handle_events(csv, userid, events)
    end
  end
  puts "user info's generated. Path: #{Dir.pwd}/info.csv"
end

def get_data(csv, userid, dirid)
  Dir.glob("#{dirid}/events.xml") do |file|
    doc = Nokogiri::XML(File.open(File.expand_path(file)))
    events = doc.xpath('//event')
    handle_events(csv, userid, events)
  end
end

def handle_events(csv, userid, events)
  events.each do |e|
    e_module = e.at_xpath('@module').to_s
    t_stamp = f_time(e.at_xpath('@timestamp').to_s)
    e_name = e.at_xpath('@eventname').to_s
    next if %w[PRESENTATION WHITEBOARD].include? e_module
    user?(e, userid) && handle_event(e, e_name, t_stamp, e_module, csv)
  end
end

def f_time(time)
  Time.at(time / 1000).utc.strftime('%H:%M:%S')
end

def handle_event(event, e_name, t_stamp, e_module, csv)
  if e_module.eql? 'CHAT'
    csv << [e_name, t_stamp, e_module, event.at_xpath('message').content.to_s.strip]
    return
  end
  csv << [e_name, t_stamp, e_module]
end

def user?(event, user_id)
  e_name = event.at_xpath('@eventname').to_s
  if %w[StopWebcamShareEvent StartWebcamShareEvent].include? e_name
    e_stream = event.at_xpath('stream').content.to_s
    return e_stream.include? user_id
  end
  userid = event.at_xpath('userId')
  userid.nil? && userid = event.at_xpath('userid')
  userid.nil? && userid = event.at_xpath('senderId')
  userid.nil? && userid = event.at_xpath('participant')
  userid.nil? ? false : userid.content == user_id
end

unless opts[:userId].nil? || opts[:recordingID].nil?
  get_user_info(opts[:userId], opts[:recordingID])
  return
end

puts 'please provide userId and recording ID like so:'
puts './bbb-user-data -u <userID> -r <recordingId>'
